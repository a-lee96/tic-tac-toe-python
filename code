# -------------- Global Variables --------------

# Video Link: https://www.youtube.com/watch?v=BHh654_7Cmw

# Game Board
board = ["-", "-", "-",
         "-", "-", "-", 
         "-", "-", "-"]


#If game is still going
game_still_going = True

# Who won? Or tie?
winner = None


# Whose turn is it
current_player = "X"


def display_board():
  print ("")
  print(board[0] + " | " + board[1] + " | " + board[2] + "     1 | 2 | 3")
  print(board[3] + " | " + board[4] + " | " + board[5] + "     4 | 5 | 6")
  print(board[6] + " | " + board[7] + " | " + board[8] + "     7 | 8 | 9")

# Play a game of Tic Tac Toe!
def play_game():

  # Display Initial Board
  display_board()

  # While the game is still going
  while game_still_going:

    # Handle a single turn of an arbitrary player
    handle_turn(current_player) # need to define current player!

    # Check if the game has ended
    check_if_game_over() 

    # Flip to the other player
    flip_player()

  # The game has ended
  if winner == "X" or winner == "O":
    print(winner + " won.")
  elif winner == None:
    print("Game is a tie.")

# Handle a single turn of an arbitrary player
def handle_turn(player):
  print("")
  print(player + "'s turn.")
  print("")
  position = input("Choose a position from 1 - 9: ")

  # Whatever the user inputs, make sure it is a valid input, and the spot is open
  valid = False
  while not valid:
      
    while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
      position = input("Choose a position from 1 - 9: ")


    # Get correct index in our board list
    position = int(position) - 1

    # Then also make sure the spot is available on the board
    if board[position] == "-":
      valid = True
    else:
      print("You can't go there. Go again.")

  board[position] = player

  display_board()

# This function will check to see if the game is over.
def check_if_game_over():
  check_for_winner()
  check_if_tie()

# This function will check if there is a pattern that nets a winner
def check_for_winner():
  # Set up global variables
  global winner
  #check for a winner anywhere
  row_winner = check_rows()
  column_winner = check_columns()
  diagonal_winner = check_diagonals()
  if row_winner:
    winner = row_winner
  elif column_winner:
    winner = column_winner
  elif diagonal_winner:
    winner = diagonal_winner
  else:
    winner = None
  return


def check_rows():
  # Set up global variables
  global game_still_going
  # Check if any of the rows have equal values with no dashes. 
  row_1 = board[0] == board[1] == board[2] != "-"
  row_2 = board[3] == board[4] == board[5] != "-"
  row_3 = board[6] == board[7] == board[8] != "-"
  # If any row does have a match, flag that there is a win.
  if row_1 or row_2 or row_3:
    game_still_going = False
  if row_1:
    return board[0]
  if row_2:
    return board[3]
  if row_3:
    return board[6]
  return

def check_columns():
   # Set up global variables
  global game_still_going
  # Check if any of the rows have equal values with no dashes. 
  column_1 = board[0] == board[3] == board[6] != "-"
  column_2 = board[1] == board[4] == board[7] != "-"
  column_3 = board[2] == board[5] == board[8] != "-"
  # If any column does have a match, flag that there is a win.
  if column_1 or column_2 or column_3:
    game_still_going = False
  if column_1:
    return board[0]
  if column_2:
    return board[1]
  if column_3:
    return board[2]
  return

def check_diagonals():
   # Set up global variables
  global game_still_going
  # Check if any of the rows have equal values with no dashes. 
  diagonal_1 = board[0] == board[4] == board[8] != "-"
  diagonal_2 = board[2] == board[4] == board[6] != "-"
  # If any column does have a match, flag that there is a win.
  if diagonal_1 or diagonal_2:
    game_still_going = False
  if diagonal_1:
    return board[0]
  if diagonal_2:
    return board[6]
  return


# This function will check if there is a pattern that nets a winner
def check_if_tie():
  global game_still_going
  if "-" not in board:
    game_still_going = False

  return

# This function will change the player for every turn.
def flip_player():
  global current_player
  if current_player == "X":
    current_player = "O"
  elif current_player == "O":
    current_player = "X"
  return


# PLAY FUNCTION WOOT!!
play_game()
